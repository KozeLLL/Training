// Теоретичне питання
// Наведіть кілька прикладів, коли доречно використовувати в коді конструкцію try...catch.

// Try...catch доречно використовувати, коли необхідно відловити помилку, що виникають коли код виконується - це не стосується помилок в синтаксисі.
// Можна використати щоб при отриманні некоректних даних для юзера з сервера - ці дані відправились назад для подальшої перевірки, або повторно надіслати запит на сервер.
// Можна знаходити помилку у виконанні написаних функцій.
//
// Завдання
// Дано масив books.
// Виведіть цей масив на екран у вигляді списку (тег ul – список має бути згенерований за допомогою Javascript).
// На сторінці повинен знаходитись div з id="root", куди і потрібно буде додати цей список (схоже завдання виконувалось в модулі basic).
// Перед додаванням об'єкта на сторінку потрібно перевірити його на коректність (в об'єкті повинні міститися всі три властивості - author, name, price).
// Якщо якоїсь із цих властивостей немає, в консолі має висвітитися помилка із зазначенням - якої властивості немає в об'єкті.
// Ті елементи масиву, які не є коректними за умовами попереднього пункту, не повинні з'явитися на сторінці.

//

const books = [
    {
        author: "Люсі Фолі",
        name: "Список запрошених",
        price: 70
    },
    {
        author: "Сюзанна Кларк",
        name: "Джонатан Стрейндж і м-р Норрелл",
    },
    {
        name: "Дизайн. Книга для недизайнерів.",
        price: 70
    },
    {
        author: "Алан Мур",
        name: "Неономікон",
        price: 70
    },
    {
        author: "Террі Пратчетт",
        name: "Рухомі картинки",
        price: 40
    },
    {
        author: "Анґус Гайленд",
        name: "Коти в мистецтві",
    }
];
const divak = document.querySelector('#root');
const mappedBooks = books.map(item => {

    try {
        if (!item.price) {
            throw Error('hast price')
        }
        if (!item.author) {
            throw Error('hast author')
        }
        if (!item.name) {
            throw Error('hast name')
        }

        return `
                <li>
                    <p>${item.name}</p>
                    <p>${item.price}</p>
                    <p>${item.author}</p>
                </li>`
    } catch (e) {
        console.log(e.message)
    }
}).join('')


divak.insertAdjacentHTML("afterbegin", `<ul>${mappedBooks}</ul>`)
